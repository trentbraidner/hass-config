updater:
  show_state: true
  show_name: false
  show_icon: false
  styles:
    state:
      - text-align: left
      - justify-self: left
      - white-space: normal
    card:
      - cursor: default
      - padding: 0.2em 0 0 0.6em
      - letter-spacing: var(--mdc-typography-body1-letter-spacing)
  tap_action:
    href:
  extra_styles: |
    #ripple {
      display: none;
    }
    ha-icon {
      width: 1.4em;
      vertical-align: 12%;
      opacity: 0.5;
      padding-right: 2px;
    }
    .title {
      font-size: 1.3em;
      font-weight: 500;
    }
    .subtitle {
      font-size: 0.95em;
      line-height: 0.7em;
      padding-left: 3px;
      padding-bottom: 10px;
      font-weight: 500;
      color: #828383;
    }
    a {
      color: var(--primary-color);
    }
    ul {
      margin-top: -0.6em;
      font-size: 0.88em;
      letter-spacing: 0.5px;
      line-height: 1.6em;
    }
    code {
      background-color: var(--secondary-background-color);
    }
updater_hass:
  template:
    - updater
    - settings
  state_display: |
    [[[
      if (entity) {
        let links = new RegExp('<a href="([^"]+)"', "g"),
          installed = entity.state,
          hass_version_latest = states['sensor.hass_version_latest'],
          hass_version_latest_beta = states['sensor.hass_version_latest_beta'],
          hass_release_notes = states['sensor.hass_release_notes'],
          hass_release_notes_rc = states['sensor.hass_release_notes_rc'];
        let latest = installed.includes('b')
          ? hass_version_latest_beta.state
          : hass_version_latest.state;
        let release_notes = installed.includes('b')
          ? marked.parse(hass_release_notes.attributes.body)
          : marked.parse(hass_release_notes_rc.attributes.body);
        let subtitle = installed === latest
          ? `${variables.translate_no_updates} <b>&larr;</b> ${installed}`
          : `${ !installed.includes('.') || !latest.includes('.')
              ? `${variables.translate_no_updates} <b>&larr;</b> ${installed}`
              : `${installed} <b>&rarr;</b> ${latest} ${variables.translate_available} ${String.fromCodePoint("0x1f389")}`
            }`;
        let output = installed === latest
          ? '<ul></ul>'
          : `${ !installed.includes('.') || !latest.includes('.')
              ? '<ul></ul>'
              : release_notes.replace(links, '<a href="#" onclick="window.open(\'$1\')"')
            }`;
        return `
          <ha-icon icon="mdi:home-assistant"></ha-icon> <span class="title">Home Assistant</span><br>
          <p class="subtitle">${subtitle}</p>
          ${output}
        `;
        }
    ]]]
updater_hacs:
  template:
    - updater
    - settings
  state_display: |
    [[[
      if (entity) {
        let output = '',
          hacs_version = states['sensor.template_hacs_version'] || undefined;
        var arr = entity.attributes.repositories === undefined
          ? []
          : entity.attributes.repositories;
        for (var i = 0; i < arr.length; i++) {
          output += `<li><b><a href="#" onclick="window.open('https://github.com/${arr[i].name}/releases');">
            ${arr[i].display_name}</a></b> ${arr[i].installed_version} <b>&rarr;</b> ${arr[i].available_version}</li>`
        }
        let count = arr.length;
        let subtitle = count === 0
          ? `${variables.translate_no_updates} ${hacs_version === undefined || hacs_version.state === 'unknown' ? ' ' : `<b>&larr;</b> ${hacs_version.state}`}`
          : `${count} ${count === 1 ? variables.translate_update_available : variables.translate_updates_available} ${String.fromCodePoint('0x1f389')}`;
        return `
          <ha-icon icon="hacs:hacs"></ha-icon> <span class="title">Community Store</span><br>
          <p class="subtitle">${subtitle}</p>
          <ul>${output}</ul>
        `;
      }
    ]]]
updater_other:
  template:
    - updater
    - settings
  state_display: |
    [[[
      if (entity) {
        let output = '';
        let attr = Object.fromEntries(
          Object.entries(entity.attributes).filter(([, value]) => {
            return value != false;
          })
        );
        let count = Object.keys(attr).length;
        for (const [, value] of Object.entries(attr)) {
          output += `<li>${value}</li>`;
        }
        let subtitle = count == 0
          ? variables.translate_no_updates
          : `${count} ${count == 1 ? variables.translate_update_available : variables.translate_updates_available} ${String.fromCodePoint('0x1f389')}`;
        return `
          <ha-icon icon="mdi:update"></ha-icon> <span class="title">Other</span><br>
          <p class="subtitle">${subtitle}</p>
          <ul>${output}</ul>
        `;
      }
    ]]]
hacs_iframe:
  tap_action:
    action: fire-dom-event
    browser_mod:
      command: popup
      title: HACS
      style:
        div: |
          .content {
            padding: 0;
          }
        hui-iframe-card$: |
          ha-card {
            margin-left: -58px;
          }
      large: true
      card:
        type: iframe
        url: >
          [[[ return `/${hass.panels.hacs.url_path}` ]]]
  template: icon_name

hacs_navigate_ios:
  tap_action:
    close_popup: >
      [[[ hass.callService('browser_mod', 'close_popup'); ]]]
    action: navigate
    navigation_path: >
      [[[ return `/${hass.panels.hacs.url_path}` ]]]
  template: icon_name